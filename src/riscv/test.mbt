// fn externals() -> @immut/hashmap.T[String, @types.Type] {
//   @immut/hashmap.T::new()
//   .add("read_int", @types.Fun([], Int))
//   .add("read_char", @types.Fun([], Int))
//   .add("print_int", @types.Fun([Int], Unit))
//   .add("print_char", @types.Fun([Int], Unit))
//   .add("print_endline", @types.Fun([], Unit))
//   .add("create_array", @types.Fun([Int, Int], @types.Type::Array(Int)))
//   .add(
//     "create_float_array",
//     @types.Fun([Int, Double], @types.Type::Array(Double)),
//   )
//   .add("create_ptr_array", @types.Fun([Int, Ptr], @types.Type::Array(Ptr)))
//   .add("truncate", @types.Fun([Double], Int))
//   .add("sin", @types.Fun([Double], Double))
//   .add("cos", @types.Fun([Double], Double))
//   .add("sqrt", @types.Fun([Double], Double))
//   .add("abs_float", @types.Fun([Double], Double))
//   .add("int_of_float", @types.Fun([Double], Int))
//   .add("float_of_int", @types.Fun([Int], Double))
// }

// test {
//   let input = @fs.read_file_to_string!(path="test/test_src/cls-bug2.mbt")
//   let context = @parser.parse(input)
//   let typechecked = @typing.typing!(context)
//   //println(typechecked)
//   //println("---------------")
//   let knf_env = @knf.KnfEnv::new(externals())
//   let knf = knf_env.to_knf(typechecked)
//   let closure_ir = @closure.knf_program_to_closure(
//     knf,
//     Map::from_iter(externals().iter()),
//   )
//   //println("---------------")
//   println(closure_ir)
//   //println("---------------")
//   let asm = emit(closure_ir)
//   println(print_functions(asm))
// }                              
// // Let((_477, Array(Double)), 
// // Let((_476, Int), Int(0), ArrayGet(_416, _476)), 
// // Let((_478, Int), Int(1), ArrayGet(_477, _478))), 
// // CallDirect(Label("minimbt_truncate"), [_479])), 
// // CallDirect(Label("minimbt_print_int"), [_480])), 
// // Let((_482, Unit), CallDirect(Label("minimbt_print_endline"), []), 
// // Let((_488, Unit), Let((_487, Int), Let((_486, Array(Double)), 
// // Let((_484, Array(Double)), 
// // Let((_483, Int), Int(1), ArrayGet(_416, _483)), 
// // Let((_485, Int), Int(0), ArrayGet(_484, _485))), 
// // CallDirect(Label("minimbt_truncate"), [_486])), 
// // CallDirect(Label("minimbt_print_int"), [_487])), 
// // Let((_489, Unit), CallDirect(Label("minimbt_print_endline"), []), 
// // Let((_495, Unit), Let((_494, Int), Let((_493, Array(Double)), 
// // Let((_491, Array(Double)), Let((_490, Int), Int(1), ArrayGet(_416, _490)), 
// // Let((_492, Int), Int(1), ArrayGet(_491, _492))), 
// // CallDirect(Label("minimbt_truncate"), [_493])), 
// // (Label("minimbt_print_int"), [_494])), Unit)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}, 
// // {name: Label("_207"), 
// // old_name: _207, 
// // is_closure: true, 
// // ty: ClosureFn([Int, Int], Array(Array(Double))), 
// // args: [(_209, Int), (_210, Int)], 
// // formal_free_vars: [(_206, Array(Double))], 
// // body: Let((_211, Array(Array(Double))), 
// // CallDirect(Label("minimbt_create_ptr_array"), [_209, _206]), 
// // MakeClosure((_212, ClosureFn([Int], Unit)), 
// // {name: Label("_212"), 
// // actual_free_vars: [_211, _210]}, 
// // Let((_415, Unit), Let((_414, Int), 
// // Let((_413, Int), Int(1), Sub(_209, _413)), 
// // CallClosure(_212, [_414])), Var(_211))))}, 
// // {name: Label("_212"), old_name: _212, is_closure: true, 
// // ty: ClosureFn([Int], Unit), args: [(_214, Int)], 
// // formal_free_vars: [(_211, Array(Array(Double))), (_210, Int)], 
// // body: Let((_219, Int), Int(0), IfLe(_219, _214, 
// // Let((_216, Array(Double)), 
// // Let((_215, Double), Double(0), 
// // CallDirect(Label("minimbt_create_float_array"), [_210, _215])), 
// // Let((_0, Unit), ArrayPut(_211, _214, _216), 
// // Let((_218, Int), Let((_217, Int), Int(1), 
// // Sub(_214, _217)), CallClosure(_212, [_218])))), Unit))}, 
// // {name: Label("_1"), old_name: _1, is_closure: true, 
// // ty: ClosureFn([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit), 
// // args: [(_3, Int), (_4, Int), (_5, Int), (_6, Array(Array(Double))), (_7, Array(Array(Double))), (_8, Array(Array(Double)))], 
// // formal_free_vars: [], 
// // body: MakeClosure((_9, ClosureFn([Int], Unit)), 
// // {name: Label("_9"), actual_free_vars: [_5, _4, _7, _6, _8]}, 
// // Let((_211, Int), Let((_210, Int), Int(1), Sub(_3, _210)), 
// // CallClosure(_9, [_211])))}, 
// // {name: Label("_9"), old_name: _9, is_closure: true, 
// // ty: ClosureFn([Int], Unit), args: [(_11, Int)], 
// // formal_free_vars: [(_5, Int), (_4, Int), (_7, Array(Array(Double))), (_6, Array(Array(Double))), (_8, Array(Array(Double)))], 
// // body: Let((_218, Int), Int(0), IfLe(_218, _11, 
// // MakeClosure((_12, ClosureFn([Int], Unit)), 
// // {name: Label("_12"), actual_free_vars: [_4, _7, _6, _11, _8]}, 
// // Let((_215, Unit), Let((_214, Int), Let((_213, Int), Int(1), Sub(_5, _213)), 
// // CallClosure(_12, [_214])), Let((_217, Int), Let((_216, Int), Int(1), Sub(_11, _216)), CallClosure(_9, [_217])))), Unit))}, {name: Label("_12"), old_name: _12, is_closure: true, ty: ClosureFn([Int], Unit), args: [(_14, Int)], formal_free_vars: [(_4, Int), (_7, Array(Array(Double))), (_6, Array(Array(Double))), (_11, Int), (_8, Array(Array(Double)))], body: Let((_221, Int), Int(0), IfLe(_221, _14, MakeClosure((_15, ClosureFn([Int], Unit)), {name: Label("_15"), actual_free_vars: [_14, _7, _6, _11, _8]}, Let((_218, Unit), Let((_217, Int), Let((_216, Int), Int(1), Sub(_4, _216)), CallClosure(_15, [_217])), Let((_220, Int), Let((_219, Int), Int(1), Sub(_14, _219)), CallClosure(_12, [_220])))), Unit))}, {name: Label("_15"), old_name: _15, is_closure: true, ty: ClosureFn([Int], Unit), args: [(_17, Int)], formal_free_vars: [(_14, Int), (_7, Array(Array(Double))), (_6, Array(Array(Double))), (_11, Int), (_8, Array(Array(Double)))], body: Let((_29, Int), Int(0), IfLe(_29, _17, Let((_25, Array(Array(Double))), ArrayGet(_8, _11), Let((_26, Double), Let((_23, Double), Let((_18, Array(Double)), ArrayGet(_8, _11), ArrayGet(_18, _14)), Let((_24, Double), Let((_21, Double), Let((_19, Array(Double)), ArrayGet(_6, _11), ArrayGet(_19, _17)), Let((_22, Double), Let((_20, Array(Double)), ArrayGet(_7, _17), ArrayGet(_20, _14)), FMul(_21, _22))), FAdd(_23, _24))), Let((_0, Unit), ArrayPut(_25, _14, _26), Let((_28, Int), Let((_27, Int), Int(1), Sub(_17, _27)), CallClosure(_15, [_28]))))), Unit))}], body: MakeClosure((_1, ClosureFn([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)), {name: Label("_1"), actual_free_vars: []}, MakeClosure((minimbt_main, ClosureFn([], Unit)), {name: Label("minimbt_main"), actual_free_vars: [_1]}, CallClosure(minimbt_main, [])))}
// // {fundefs: [
// // {name: Label("minimbt_main"), 
// // old_name: minimbt_main, 
// // is_closure: true, 
// // ty: ClosureFn([], Unit), 
// // args: [], 
// // formal_free_vars: [(_1, ClosureFn([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit))],
// //  body: Let((_206, Array(Double)), 
// //  Let((_204, Int), Int(0), 
// //  Let((_205, Double), Double(0), 
// //  CallDirect(Label("minimbt_create_float_array"), [_204, _205]))), 
// //  MakeClosure((_207, ClosureFn([Int, Int], Array(Array(Double)))), 
// //  {name: Label("_207"), actual_free_vars: [_206]}, 
// //  Let((_410, Array(Array(Double))), 
// //  Let((_408, Int), Int(2), 
// //  Let((_409, Int), Int(3), 
// //  CallClosure(_207, [_408, _409]))), 
// //  Let((_413, Array(Array(Double))), 
// //  Let((_411, Int), Int(3), 
// //  Let((_412, Int), Int(2), 
// //  CallClosure(_207, [_411, _412]))), 
// //  Let((_416, Array(Array(Double))), 
// //  Let((_414, Int), Int(2), 
// //  Let((_415, Int), Int(2), 
// //  CallClosure(_207, [_414, _415]))), 
// //  Let((_418, Array(Array(Double))), 
// //  Let((_417, Int), Int(0), 
// //  ArrayGet(_410, _417)), 
// //  Let((_419, Int), Int(0), 
// //  Let((_420, Double), Double(1), 
// //  Let((_0, Unit), ArrayPut(_418, _419, _420), 
// //  Let((_422, Array(Array(Double))),
// //   Let((_421, Int), Int(0), 
// //   ArrayGet(_410, _421)), 
// //   Let((_423, Int), Int(1), 
// //   Let((_424, Double), Double(2), Let((_0, Unit), 
// //   ArrayPut(_422, _423, _424), 
// //   Let((_426, Array(Array(Double))), 
// //   Let((_425, Int), Int(0), 
// //   ArrayGet(_410, _425)), 
// //   Let((_427, Int), Int(2), 
// //   Let((_428, Double), Double(3), 
// //   Let((_0, Unit), ArrayPut(_426, _427, _428), 
// //   Let((_430, Array(Array(Double))),
// //   Let((_429, Int), Int(1), 
// //   ArrayGet(_410, _429)), 
// //   Let((_431, Int), Int(0), 
// //   Let((_432, Double), Double(4), 
// //   Let((_0, Unit),
// //    ArrayPut(_430, _431, _432), 
// //    Let((_434, Array(Array(Double))), 
// //    Let((_433, Int), Int(1), 
// //    ArrayGet(_410, _433)), 
// //    Let((_435, Int), Int(1), 
// //    Let((_436, Double), Double(5), Let((_0, Unit), 
// //    ArrayPut(_434, _435, _436), 
// //    Let((_438, Array(Array(Double))), 
// //    Let((_437, Int), Int(1), 
// //    ArrayGet(_410, _437)), 
// //    Let((_439, Int), Int(2), 
// //    Let((_440, Double), Double(6), 
// //    Let((_0, Unit), ArrayPut(_438, _439, _440), 
// //    Let((_442, Array(Array(Double))), 
// //    Let((_441, Int), Int(0), ArrayGet(_413, _441)), 
// //    Let((_443, Int), Int(0), 
// //    Let((_444, Double), Double(7), 
// //    Let((_0, Unit), ArrayPut(_442, _443, _444), 
// //    Let((_446, Array(Array(Double))), 
// //    Let((_445, Int), Int(0), 
// //    ArrayGet(_413, _445)), 
// //    Let((_447, Int), Int(1), 
// //    Let((_448, Double), Double(8), 
// //    Let((_0, Unit), ArrayPut(_446, _447, _448), 
// //    Let((_450, Array(Array(Double))), 
// //    Let((_449, Int), Int(1), ArrayGet(_413, _449)), 
// //    Let((_451, Int), Int(0), 
// //    Let((_452, Double), Double(9), 
// //    Let((_0, Unit), ArrayPut(_450, _451, _452), 
// //    Let((_454, Array(Array(Double))), 
// //    Let((_453, Int), Int(1), ArrayGet(_413, _453)), 
// //    Let((_455, Int), Int(1), 
// //    Let((_456, Double), Double(10), 
// //    Let((_0, Unit), ArrayPut(_454, _455, _456), 
// //    Let((_458, Array(Array(Double))), 
// //    Let((_457, Int), Int(2), 
// //    ArrayGet(_413, _457)), 
// //    Let((_459, Int), Int(0), 
// //    Let((_460, Double), Double(11), 
// //    Let((_0, Unit), ArrayPut(_458, _459, _460), 
// //    Let((_462, Array(Array(Double))),
// //     Let((_461, Int), Int(2), 
// //     ArrayGet(_413, _461)), 
// //     Let((_463, Int), Int(1), 
// //     Let((_464, Double), Double(12), 
// //     Let((_0, Unit), ArrayPut(_462, _463, _464), 
// //     Let((_468, Unit), Let((_465, Int), Int(2), 
// //     Let((_466, Int), Int(3), Let((_467, Int), Int(2), 
// //     CallClosure(_1, [_465, _466, _467, _410, _413, _416])))), 
// //     Let((_474, Unit), Let((_473, Int), Let((_472, Array(Double)), 
// //     Let((_470, Array(Double)), 
// //     Let((_469, Int), Int(0), ArrayGet(_416, _469)), 
// //     Let((_471, Int), Int(0), ArrayGet(_470, _471))), 
// //     CallDirect(Label("minimbt_truncate"), [_472])), 
// //     CallDirect(Label("minimbt_print_int"), [_473])), 
// //     Let((_475, Unit), 
// //     CallDirect(Label("minimbt_print_endline"), 
// //     [_416]), Let((_481, Unit), 
// //     Let((_480, Int), Let((_479, Array(Double)), 
// //     Let((_477, Array(Double)), 
// //     Let((_476, Int), Int(0), 
// //     ArrayGet(_416, _476)), Let((_478, Int), Int(1), 
// //     ArrayGet(_477, _478))), 
// //     CallDirect(Label("minimbt_truncate"), [_479])), 
// //     CallDirect(Label("minimbt_print_int"), [_480])), 
// //     Let((_482, Unit), 
// //     CallDirect(Label("minimbt_print_endline"), [_416]), 
// //     Let((_488, Unit), Let((_487, Int), Let((_486, Array(Double)), 
// //     Let((_484, Array(Double)), Let((_483, Int), Int(1), 
// //     ArrayGet(_416, _483)), Let((_485, Int), Int(0), 
// //     ArrayGet(_484, _485))), CallDirect(Label("minimbt_truncate"), [_486])), 
// //     CallDirect(Label("minimbt_print_int"), [_487])), 
// //     Let((_489, Unit), CallDirect(Label("minimbt_print_endline"), 
// //     [_416]), 
// //     Let((_495, Unit), Let((_494, Int), Let((_493, Array(Double)), 
// //     Let((_491, Array(Double)), Let((_490, Int), Int(1), 
// //     ArrayGet(_416, _490)), Let((_492, Int), Int(1), 
// //     ArrayGet(_491, _492))), CallDirect(Label("minimbt_truncate"), [_493])), 
// //     CallDirect(Label("minimbt_print_int"), [_494])), Unit)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))}, 
// //     {name: Label("_207"), 
// //     old_name: _207, 
// //     is_closure: true, 
// //     ty: ClosureFn([Int, Int], Array(Array(Double))), 
// //     args: [(_209, Int), (_210, Int)],
// //      formal_free_vars: [(_206, Array(Double))], 
// //      body: Let((_211, Array(Array(Double))), 
// //      CallDirect(Label("minimbt_create_ptr_array"), [_209, _206, _210]), 
// //      MakeClosure((_212, ClosureFn([Int], Unit)), 
// //      {name: Label("_212"), actual_free_vars: [_210, _211]}, 
// //      Let((_415, Unit), Let((_414, Int), Let((_413, Int), Int(1), 
// //      Sub(_209, _413)), CallClosure(_212, [_414])), Var(_211))))}, 
// //      {name: Label("_212"), 
// //      old_name: _212, 
// //      is_closure: true, 
// //      ty: ClosureFn([Int], Unit), 
// //      args: [(_214, Int)], 
// //      formal_free_vars: [(_210, Int), (_211, Array(Array(Double)))], 
// //      body: Let((_219, Int), Int(0), 
// //      IfLe(_219, _214, Let((_216, Array(Double)), 
// //      Let((_215, Double), Double(0), 
// //      CallDirect(Label("minimbt_create_float_array"), [_210, _215])), 
// //      Let((_0, Unit), ArrayPut(_211, _214, _216), 
// //      Let((_218, Int), 
// //      Let((_217, Int), Int(1), Sub(_214, _217)), 
// //      CallClosure(_212, [_218])))), Unit))}, 
// //      {name: Label("_1"), 
// //      old_name: _1, 
// //      is_closure: true, 
// //      ty: ClosureFn([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit), 
// //      args: [(_3, Int), (_4, Int), (_5, Int), (_6, Array(Array(Double))), (_7, Array(Array(Double))), (_8, Array(Array(Double)))], 
// //      formal_free_vars: [], 
// //      body: MakeClosure((_9, ClosureFn([Int], Unit)), {name: Label("_9"), 
// //      actual_free_vars: [_8, _6, _7, _4, _5]}, 
// //      Let((_211, Int), Let((_210, Int), Int(1), Sub(_3, _210)), 
// //      CallClosure(_9, [_211])))}, 
// //      {name: Label("_9"), 
// //      old_name: _9, 
// //      is_closure: true, 
// //      ty: ClosureFn([Int], Unit), 
// //      args: [(_11, Int)], 
// //      formal_free_vars: [(_8, Array(Array(Double))), (_6, Array(Array(Double))), (_7, Array(Array(Double))), (_4, Int), (_5, Int)], 
// //      body: Let((_218, Int), Int(0), 
// //      IfLe(_218, _11, 
// //      MakeClosure((_12, ClosureFn([Int], Unit)), 
// //      {name: Label("_12"), actual_free_vars: [_8, _11, _6, _7, _4]}, 
// //      Let((_215, Unit), Let((_214, Int), Let((_213, Int), Int(1), Sub(_5, _213)), 
// //      CallClosure(_12, [_214])), 
// //      Let((_217, Int), Let((_216, Int), Int(1), Sub(_11, _216)), 
// //      CallClosure(_9, [_217])))), Unit))}, 
// //      {name: Label("_12"), old_name: _12, is_closure: true,
// //       ty: ClosureFn([Int], Unit), 
// //       args: [(_14, Int)], 
// //       formal_free_vars: [(_8, Array(Array(Double))), (_11, Int), (_6, Array(Array(Double))), (_7, Array(Array(Double))), (_4, Int)], body: Let((_221, Int), Int(0), IfLe(_221, _14, MakeClosure((_15, ClosureFn([Int], Unit)),
// //        {name: Label("_15"), 
// //        actual_free_vars: [_8, _11, _14, _6, _7]}, 
// //        Let((_218, Unit), Let((_217, Int), Let((_216, Int), Int(1),
// //         Sub(_4, _216)), 
// //         CallClosure(_15, [_217])), Let((_220, Int), 
// //         Let((_219, Int), Int(1), Sub(_14, _219)), 
// //         CallClosure(_12, [_220])))), Unit))}, 
// //         {name: Label("_15"), old_name: _15, is_closure: true, 
// //         ty: ClosureFn([Int], Unit),
// //          args: [(_17, Int)],
// //           formal_free_vars: [(_8, Array(Array(Double))), (_11, Int), (_14, Int), (_6, Array(Array(Double))), (_7, Array(Array(Double)))], 

// // {fundefs: [{name: Label("minimbt_main"), 
// // old_name: minimbt_main, 
// // is_closure: true, 
// // ty: ClosureFn([], Unit), 
// // args: [], 
// // formal_free_vars: [(_1, ClosureFn([ClosureFn([Int], Int), ClosureFn([Int], Int)], ClosureFn([Int], Int))), 
// // (_202, ClosureFn([Int], Int)), (_604, ClosureFn([Int], Int)), 
// // (_403, ClosureFn([Int], Int))], 
// // body: Let((_808, ClosureFn([Int], Int)), 
// // Let((_807, ClosureFn([Int], Int)),
// // CallClosure(_1, [_202, _604]), 
// // CallClosure(_1, [_403, _807])), 
// // Let((_810, Int), 
// // Let((_809, Int), 
// // Int(123), 
// // CallClosure(_808, [_809])), 
// // CallDirect(Label("minimbt_print_int"), [_810])))}, 
// // {name: Label("_604"), old_name: _604, is_closure: true, 
// // ty: ClosureFn([Int], Int), 
// // args: [(_606, Int)], 
// // formal_free_vars: [], 
// // body: Let((_607, Int), Int(1), Sub(_606, _607))}, 
// // {name: Label("_403"), old_name: _403, 
// // is_closure: true, 
// // ty: ClosureFn([Int], Int), 
// // args: [(_405, Int)], formal_free_vars: [], 
// // body: Let((_406, Int), Int(1), Add(_405, _406))}, 
// // {name: Label("_202"), old_name: _202, is_closure: true, 
// // ty: ClosureFn([Int], Int), 
// // args: [(_204, Int)], formal_free_vars: [], 
// // body: Add(_204, _204)}, 
// // {name: Label("_1"), old_name: _1, 
// // is_closure: true, 
// // ty: ClosureFn([ClosureFn([Int], Int), ClosureFn([Int], Int)], 
// // ClosureFn([Int], Int)), 
// // args: [(_3, ClosureFn([Int], Int)), (_4, ClosureFn([Int], Int))], 
// // formal_free_vars: [], 
// // body: MakeClosure((_5, ClosureFn([Int], Int)), 
// // {name: Label("_5"), actual_free_vars: [_3, _4]}, Var(_5))},
// //  {name: Label("_5"), 
// //  old_name: _5, 
// //  is_closure: true, 
// //  ty: ClosureFn([Int], Int), 
// //  args: [(_7, Int)], 
// //  formal_free_vars: 
// //  [(_3, ClosureFn([Int], Int)), (_4, ClosureFn([Int], Int))], 
// //  body: Let((_8, Int), CallClosure(_3, [_7]), CallClosure(_4, [_8]))}],
// //   body: MakeClosure((_1, ClosureFn([ClosureFn([Int], Int), ClosureFn([Int], Int)], ClosureFn([Int], Int))), {name: Label("_1"), actual_free_vars: []}, MakeClosure((_202, ClosureFn([Int], Int)), {name: Label("_202"), actual_free_vars: []}, MakeClosure((_403, ClosureFn([Int], Int)), {name: Label("_403"), actual_free_vars: []}, MakeClosure((_604, ClosureFn([Int], Int)), {name: Label("_604"), actual_free_vars: []}, MakeClosure((minimbt_main, ClosureFn([], Unit)), {name: Label("minimbt_main"), actual_free_vars: [_1, _202, _604, _403]}, CallClosure(minimbt_main, []))))))}
// // {fundefs: [
// //   {name: Label("minimbt_main"), 
// //   old_name: minimbt_main, 
// //   is_closure: true, 
// //   ty: ClosureFn([], Unit), 
// //   args: [], 
// //   formal_free_vars: [(_1, ClosureFn([Int], Unit))], 
// //   body: Let((_204, Int), Int(9), 
// //   CallClosure(_1, [_204]))}, 
// //   {name: Label("_1"), 
// //   old_name: _1, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Unit), 
// //   args: [(_3, Int)], 
// //   formal_free_vars: [], 
// //   body: Let((_11, Int), Int(0), 
// //   IfLe(_11, _3, 
// //   Let((_4, Unit), 
// //   CallDirect(Label("minimbt_print_int"), [_3, _1]), 
// //   Let((_6, Array(ClosureFn([Int], Unit))), 
// //   Let((_5, Int), Int(1), 
// //   CallDirect(Label("minimbt_create_ptr_array"), 
// //   [_5, _1])), 
// //   Let((_8, ClosureFn([Int], Unit)), 
// //   Let((_7, Int), Int(0), 
// //   ArrayGet(_6, _7)), Let((_10, Int), 
// //   Let((_9, Int), Int(1), Sub(_3, _9)), 
// //   CallClosure(_8, [_10]))))), Unit))}], 
// //   {name: Label("minimbt_main"), 
// //   old_name: minimbt_main, 
// //   is_closure: true, 
// //   ty: ClosureFn([], Unit), 
// //   args: [], 
// //   formal_free_vars: [(_202, ClosureFn([Int], ClosureFn([Int], Int)))], 
// //   body: Let((_408, Int), 
// //   Let((_406, ClosureFn([Int], Int)), 
// //   Let((_405, Int), Int(456), 
// //   CallClosure(_202, [_405])), 
// //   Let((_407, Int), Int(789), 
// //   CallClosure(_406, [_407]))), 
// //   CallDirect(Label("minimbt_print_int"), [_408]))}, 
// //   {name: Label("_202"), 
// //   old_name: _202, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], ClosureFn([Int], Int)), 
// //   args: [(_204, Int)], 
// //   formal_free_vars: [(_1, ClosureFn([Int], Int))], 
// //   body: Var(_1)}, 
// //   {name: Label("_1"), 
// //   old_name: _1, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_3, Int)], 
// //   formal_free_vars: [], 
// //   body: Let((_4, Int), Int(123), Add(_3, _4))}], 
// //  }
// // {fundefs: [
// //   {name: Label("minimbt_main"), 
// //   old_name: minimbt_main, 
// //   is_closure: true, 
// //   ty: ClosureFn([], Unit), 
// //   args: [], 
// //   formal_free_vars: [(_1, ClosureFn([ClosureFn([Int], Int), ClosureFn([Int], Int)], ClosureFn([Int], Int))), (_202, ClosureFn([Int], Int)), (_604, ClosureFn([Int], Int)), (_403, ClosureFn([Int], Int))], 
// //   body: Let((_808, ClosureFn([Int], Int)), 
// //   Let((_807, ClosureFn([Int], Int)), 
// //   CallClosure(_1, [_202, _604]), 
// //   CallClosure(_1, [_403, _807])), 
// //   Let((_810, Int), 
// //   Let((_809, Int), 
// //   Int(123), 
// //   CallClosure(_808, [_809])), 
// //   CallDirect(Label("minimbt_print_int"), [_810])))}, 

// //   {name: Label("_604"), 
// //   old_name: _604, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_606, Int)], 
// //   formal_free_vars: [], 
// //   body: Let((_607, Int), Int(1), 
// //   Sub(_606, _607))}, 

// //   {name: Label("_403"), 
// //   old_name: _403, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_405, Int)], 
// //   formal_free_vars: [], 
// //   body: Let((_406, Int), Int(1), 
// //   Add(_405, _406))},

// //   {name: Label("_202"), 
// //   old_name: _202, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_204, Int)], 
// //   formal_free_vars: [], 
// //   body: Add(_204, _204)}, 

// //   {name: Label("_1"), 
// //   old_name: _1, 
// //   is_closure: true, 
// //   ty: ClosureFn([ClosureFn([Int], Int), ClosureFn([Int], Int)], ClosureFn([Int], Int)), 
// //   args: [(_3, ClosureFn([Int], Int)), (_4, ClosureFn([Int], Int))], 
// //   formal_free_vars: [], 
// //   body: MakeClosure((_5, ClosureFn([Int], Int)), 
// //   {name: Label("_5"), actual_free_vars: [_3, _4]}, Var(_5))}, 

// //   {name: Label("_5"), 
// //   old_name: _5, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_7, Int)], 
// //   formal_free_vars: [(_3, ClosureFn([Int], Int)), (_4, ClosureFn([Int], Int))], 
// //   body: Let((_8, Int), CallClosure(_3, [_7]), 
// //   CallClosure(_4, [_8]))}], 


// // {fundefs: [{

// //   name: Label("minimbt_main"), 
// //   old_name: minimbt_main, 
// //   is_closure: true, 
// //   ty: ClosureFn([], Unit), 
// //   args: [], 
// //   formal_free_vars: [(_1, ClosureFn([Int], ClosureFn([Int], Int)))], 
// //   body: Let((_207, Int), 
// //   Let((_205, ClosureFn([Int], Int)), 
// //   Let((_204, Int), Int(3), CallClosure(_1, [_204])), 
// //   Let((_206, Int), Int(7), CallClosure(_205, [_206]))), 
// //   CallDirect(Label("minimbt_print_int"), [_207]))}, 
// //   {name: Label("_1"), 
// //   old_name: _1, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], ClosureFn([Int], Int)), 
// //   args: [(_3, Int)], 
// //   formal_free_vars: [], 
// //   body: MakeClosure((_4, ClosureFn([Int], Int)), 
// //   {name: Label("_4"), actual_free_vars: [_3]}, Var(_4))}, 
// //   {name: Label("_4"), 
// //   old_name: _4, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_6, Int)], 
// //   formal_free_vars: [(_3, Int)], 
// //   body: Add(_3, _6)}], 

// // old_name: minimbt_main, 
// // is_closure: true, 
// // ty: ClosureFn([], Unit), 
// // args: [], 
// // formal_free_vars: [(_202, ClosureFn([Int, Int, Int, Int, Int, Int], Unit))], 
// // body: Let((_405, Int), Int(1), 
// // Let((_406, Int), Int(2), 
// // Let((_407, Int), Int(3), 
// // Let((_408, Int), Int(4), 
// // Let((_409, Int), Int(5), 
// // Let((_410, Int), Int(6), 
// // CallClosure(_202, [_405, _406, _407, _408, _409, _410])))))))}, 
// // {name: Label("_202"), 
// // old_name: _202, 
// // is_closure: true, 
// // ty: ClosureFn([Int, Int, Int, Int, Int, Int], Unit), 
// // args: [(_204, Int), (_205, Int), (_206, Int), (_207, Int), (_208, Int), (_209, Int)], 
// // formal_free_vars: [(_1, ClosureFn([Int, Int, Int, Int, Int, Int], Unit))],
// // body: CallClosure(_1, [_205, _204, _207, _208, _209, _206])},
// //  {name: Label("_1"), 
// //  old_name: _1, 
// //  is_closure: true, 
// //  ty: ClosureFn([Int, Int, Int, Int, Int, Int], Unit), 
// //  args: [(_3, Int), (_4, Int), (_5, Int), (_6, Int), (_7, Int), (_8, Int)], 
// //  formal_free_vars: [], 
// //  body: Let((_9, Unit), CallDirect(Label("minimbt_print_int"), 
// //  [_3, _4, _5, _6, _7, _8]), 
// //  Let((_10, Unit), 
// //  CallDirect(Label("minimbt_print_int"), [_4, _5, _6, _7, _8]),
// //   Let((_11, Unit), CallDirect(Label("minimbt_print_int"), [_5, _6, _7, _8]), Let((_12, Unit), CallDirect(Label("minimbt_print_int"), [_6, _7, _8]), Let((_13, Unit), CallDirect(Label("minimbt_print_int"), [_7, _8]), Let((_14, Unit), CallDirect(Label("minimbt_print_int"), [_8]), Unit))))))}], body: MakeClosure((_1, ClosureFn([Int, Int, Int, Int, Int, Int], Unit)), {name: Label("_1"), actual_free_vars: []}, MakeClosure((_202, ClosureFn([Int, Int, Int, Int, Int, Int], Unit)), {name: Label("_202"), actual_free_vars: [_1]}, MakeClosure((minimbt_main, ClosureFn([], Unit)), {name: Label("minimbt_main"), actual_free_vars: [_202]}, CallClosure(minimbt_main, []))))}
// // {fundefs: [{name: Label("_403"), 
// // old_name: _403, 
// // is_closure: true, 
// // ty: ClosureFn([], Unit), 
// // args: [], 
// // formal_free_vars: [(_202, ClosureFn([Int], ClosureFn([Int], Int)))], 
// // body: Let((_408, Int), 
// // Let((_406, ClosureFn([Int], Int)), 
// // Let((_405, Int), Int(456), 
// // CallClosure(_202, [_405])), 
// // Let((_407, Int), Int(789),
// // CallClosure(_406, [_407]))),
// // CallDirect(Label("minimbt_print_int"), [_408]))}, 
// // {name: Label("_202"), 
// // old_name: _202, 
// // is_closure: true, ty: ClosureFn([Int], ClosureFn([Int], Int)), 
// // args: [(_204, Int)],
// // formal_free_vars: [(_1, ClosureFn([Int], Int))], 
// // body: Var(_1)}, 
// // {name: Label("_1"), 
// // old_name: _1, 
// // is_closure: true, 
// // ty: ClosureFn([Int], Int), 
// // args: [(_3, Int)], 
// // formal_free_vars: [], 
// // body: Let((_4, Int), Int(123), Add(_3, _4))}]}
// // {fundefs: [{name: Label("minimbt_main"), 
// // old_name: minimbt_main, 
// // is_closure: true, 
// // ty: ClosureFn([], Unit), 
// // args: [], 
// // formal_free_vars: [(_1, ClosureFn([Int], ClosureFn([Int], Int)))], 
// // body: Let((_207, ClosureFn([Int], ClosureFn([Int], ClosureFn([Int], Int)))), 
// // Let((_205, ClosureFn([Int], ClosureFn([Int], ClosureFn([Int], Int)))), 
// // Let((_204, Int), Int(3), 
// // CallClosure(_1, [_204])), 
// // Let((_206, Int), Int(7), 
// // CallClosure(_205, [_206]))), 
// // CallDirect(Label("minimbt_print_int"), [_207]))}, 
// // {name: Label("_1"), 
// // old_name: _1, 
// // is_closure: true, 
// // ty: ClosureFn([Int], ClosureFn([Int], Int)), 
// // args: [(_3, Int)], 
// // formal_free_vars: [], 
// // body: MakeClosure((_4, ClosureFn([Int], Int)), 
// // {name: Label("_4"), actual_free_vars: [_3]},
// //  Var(_4))}, 
// //  {name: Label("_4"),
// //   old_name: _4, 
// //   is_closure: true, 
// //   ty: ClosureFn([Int], Int), 
// //   args: [(_6, Int)], 
// //   formal_free_vars: [(_3, Int)], 
// //   body: Add(_3, _6)}]}
