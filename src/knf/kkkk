LetRec({name: ("loop3", Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Put(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Unit), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Unit), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Unit), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Fun([], Unit)), args: [], body: Let(("dummy", Array(Double)), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Fun([Int, Int, Array(Array(Double))], Unit)), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Put(Get(Var("mat"), Var("i")), Array(Var("n"), Double(0)), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Fun([Int, Int, Array(Double)], Array(Array(Double)))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Array(Array(Double))), Array(Var("m"), Var("dummy")), Let(("_", Unit), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Array(Array(Double))), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Array(Array(Double))), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Array(Array(Double))), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Put(Get(Get(Var("a"), Int(0)), Int(0)), Double(1), Put(Get(Get(Var("a"), Int(0)), Int(1)), Double(2), Put(Get(Get(Var("a"), Int(0)), Int(2)), Double(3), Put(Get(Get(Var("a"), Int(1)), Int(0)), Double(4), Put(Get(Get(Var("a"), Int(1)), Int(1)), Double(5), Put(Get(Get(Var("a"), Int(1)), Int(2)), Double(6), Put(Get(Get(Var("b"), Int(0)), Int(0)), Double(7), Put(Get(Get(Var("b"), Int(0)), Int(1)), Double(8), Put(Get(Get(Var("b"), Int(1)), Int(0)), Double(9), Put(Get(Get(Var("b"), Int(1)), Int(1)), Double(10), Put(Get(Get(Var("b"), Int(2)), Int(0)), Double(11), Put(Get(Get(Var("b"), Int(2)), Int(1)), Double(12), Let(("_", Unit), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Unit), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Unit), App(Var("print_endline"), []), Let(("_", Unit), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Unit), App(Var("print_endline"), []), Let(("_", Unit), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Unit), App(Var("print_endline"), []), Let(("_", Unit), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))))